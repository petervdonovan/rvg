[lam [(program)]

[def (id) [lam [(x)] x]]

[def (if) [lam [(condition) (then) (else)]
  [def (selected) [condition then else]]
  [selected]]]

[def (lam!) [lam [(k)] [lam [(l)]
  [if [[lam? k] l]
    [lam [] l]
    [fail l {Expected lam of [id k] parameters}]]]]]

[def (->) [lam [(arg-check) (result-check)]
  [lam [(l arg-check)]
    [applierify-varargs [lam [(applier)]
      [result-check [applier l]]]]]]]
[def (assertify) [lam [(? [lam! {1}]) (description)] [lam [(checkee)]
  [if [? checkee]
    [lam [] checkee]
    [fail checkee {Expected [id description]}]]]]]
[def (num!) [assertify [lam [(x)] [num? x]] {a number}]]
[def (frag!) [assertify [lam [(x)] [frag? x]] {a fragment}]]
[def (block!) [assertify [lam [(x)] [block? x]] {an assembly block}]]
[def (reg!) [assertify [lam [(x)] [reg? x]] {a register}]]

[def (true  [addattr {bool}]) [lam [(a) (b)] a]]
[def (false [addattr {bool}]) [lam [(a) (b)] b]]
[def (bool!) [assertify [lam [(x)] [[hasattr {bool}] x]] {a boolean}]]
[def (pair [lam! {2}]) [lam [(a) (b)]
  [[addattr {pair}]
    [lam [(get bool!)]
      [get a b]]]]]
[def (pair!) [assertify [lam [(x)] [[hasattr {pair}] x]] {a pair}]]
[def (cycles!) [lam [(k num!)] [lam [(b block!)] [[=! k] [cycles? b]] b]]]
[def (println) [lam [(s)] [lam [] [[print s]] [[print {
}]]]]]
[def (/*) [lam [(x)] {}]]
[program]]
